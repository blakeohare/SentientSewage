import Game;
import Math;
import Random;

class PlayScene : AbstractScene {

	static field TOP_ORIGIN = [GAME_WIDTH / 2, 2 * GAME_HEIGHT / 5];
	
	field difficulty;
	field fluid;
	field active_bricks;
	field carls;
	field counter;
	field last_click;
	field last_click_coords;
	field interval;
	field velocity;
	field decay;
	field halt_counter;
	
	constructor(difficulty) : base() {
		this.difficulty = difficulty;
		this.fluid = new FluidSurface(9, 9);
		this.active_bricks = [];
		this.carls = [];
		this.counter = 0;
		this.last_click = -9999;
		this.last_click_coords = null;
		
		switch (difficulty) {
			case 'easy':
				intervals = FPS * 3;
				velocity = 1.2;
				decay = 1.0;
				break;
			case 'medium':
				intervals = FPS * 2;
				velocity = 1.7;
				decay = 1.1;
				break;
			case 'hard':
				intervals = FPS * 1;
				velocity = 2.0;
				decay = 1.25;
				break;
			case 'insane':
				intervals = FPS / 2;
				velocity = 2.0;
				decay = 1.4;
				break;
			default:
				Core.assert(false, '?');
				break;
		}
		this.interval = intervals;
		this.velocity = velocity;
		this.decay = decay;
		
		this.halt_counter = -1; // counts down. If positive, don't grow. When chlorine lands in vat, set to 30.
	}
	
	function update(events) {
		this.halt_counter--;
		
		origin_x = PlayScene.TOP_ORIGIN[0];
		origin_y = PlayScene.TOP_ORIGIN[1];
		for (event : events) {
			x = event.x - origin_x;
			y = event.y - origin_y + this.fluid.level * 20;
			col = (x / 2.0 + y) / 40.0;
			row = (y - x / 2.0) / 40.0;
			is_click = event.type == EventType.MOUSE_LEFT_DOWN;
			ignore = false;
			if (is_click) {
				if (col >= 0 && row >= 0 && col < this.fluid.width && row < this.fluid.height) {
					delay = this.counter - this.last_click;
					if (delay < FPS / 3) {
						ignore = true;
					} else if (delay < FPS * 2 / 3 && this.last_click_coords == col * 1000 + row) {
						ignore = true;
					} else {
						this.last_click = this.counter;
						this.last_click_coords = col * 1000 + row;
					}
				}
			}
			
			if (!ignore) {
				this.fluid.set_active_tile(Math.floor(col), Math.floor(row), is_click, this.decay);
			}
		}
		
		this.fluid.update();
		new_bricks = [];
		bricks_hit = 0;
		
		new_carls = [];
		for (carl : this.carls) {
			carl.carl_update();
			remove = false;
			if (carl.carl_countdown == 0) {
				this.active_bricks.add(carl);
			} else if (carl.carl_countdown < -15) {
				remove = true;
			}
			
			if (!remove) {
				new_carls.add(carl);
			}
		}
		this.carls = new_carls;
		
		for (brick : this.active_bricks) {
			brick.update(this.fluid, this);
			if (brick.dead) {
				if (brick.hit_water) {
					bricks_hit++;
				}
			} else {
				new_bricks.add(brick);
			}
		}
		this.active_bricks = new_bricks;
		
		this.fluid.level -= bricks_hit * .2;
		if (this.fluid.level < 1) {
			this.switch_scene(new WinLoseScene(this, false));
		}
		
		if (this.halt_counter < 0) {
			this.fluid.level += .1 / FPS; // water level goes up .1 per second
		}
		
		if (this.fluid.level >= this.fluid.max_level) {
			SaveState.unlock(get_next_difficulty(this.difficulty));
			this.switch_scene(new WinLoseScene(this, true));
		}
		
		if ((this.counter + 1) % this.interval == 0) {
			x = 0.001;
			y = Random.randomFloat() * (this.fluid.height - 4) + 1.5;
			if (Random.randomFloat() < .5) {
				t = x;
				x = y;
				y = t;
			}
			
			target_x = Random.randomFloat() * (this.fluid.width - 4) + 1.5;
			target_y = Random.randomFloat() * (this.fluid.height - 4) + 1.5;
			
			this.carls.add(new Brick(x, y, this.fluid.max_level + 1, target_x, target_y, this.fluid.level, this.velocity));
		}
		
		this.counter++;
	}
	
	function render(rc) {
		redness = this.halt_counter / 30.0;
		if (redness < 0) redness = 0;
		if (redness > 1) redness = 1;
		
		this.fluid.update_ripple(rc);
		this.fluid.render(rc, PlayScene.TOP_ORIGIN[0], PlayScene.TOP_ORIGIN[1], this.active_bricks, this.carls, redness);
	}
}
