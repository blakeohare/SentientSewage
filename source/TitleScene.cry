
class TitleScene : AbstractScene {
	constructor() : base() {
		this.bounds = null;
		this.active_hover = null;
		this.my_rc = 0;
	}
	
	function hit_test(x, y) {
		if (this.bounds == null) return null;
		for (item : this.bounds.keys()) {
			bounds = this.bounds[item];
			if (x > bounds[0] && x < bounds[2] && y > bounds[1] && y < bounds[3]) {
				return item;
			}
		}
		return null;
	}
	
	function update(events) {
		for (event : events) {
			switch (event.type) {
				case 'mousemove':
					old = this.active_hover;
					this.active_hover = this.hit_test(event.x, event.y);
					if (this.active_hover != old) {
						this.my_rc = 0;
					}
					break;
				case 'mouseleftdown':
					old = this.active_hover;
					this.active_hover = this.hit_test(event.x, event.y);
					if (this.active_hover != old) {
						this.my_rc = 0;
					}
					if (this.active_hover != null) {
						switch (this.active_hover) {
							case 'intro':
								this.switch_scene(new FadeTransitionScene(this, new IntroScene()));
								break;
							case 'about':
								this.switch_scene(new FadeTransitionScene(this, new AboutScene()));
								break;
							case 'easy':
							case 'medium':
							case 'hard':
							case 'insane':
								if (SAVE_STATE.is_level_unlocked(this.active_hover)) {
									this.switch_scene(new FadeTransitionScene(this, new PlayScene(this.active_hover)));
								}
								break;
							default:
								break;
						}
					}
					break;
			}
		}
	}
	
	function get_bounce(item) {
		if (item == this.active_hover && this.bounds != null)
			return -$floor(8 * $abs($sin(this.my_rc * TWO_PI / FPS)));
		return 0;
	}
	
	function render(rc) {
	
		record_bounds = this.bounds == null;
		bounds = {};
		
		FONT.render('SENTIENT SEWAGE', 100, 20, 'XL');
		
		images = [
			'easy',
			'medium',
			'hard',
			'insane'
		];
		
		titles = [
			'Easy',
			'Medium',
			'Hard',
			'Insane',
		];
		
		lock = IMAGES.get('locked.png');
		
		y = GAME_HEIGHT / 2;
		for (i = 1; i < 5; ++i) {
			x = GAME_WIDTH * i / 5;
			difficulty = images[i - 1];
			img = IMAGES.get(difficulty + '.png');
			if (i == 1) {
				x -= 30;
			}
			$gfx_blit_image(img, x - img.width / 2, y - img.height / 2);
			
			if (record_bounds) {
				bounds[difficulty] = [x - 90, y - 100, x + 90, y + 100];
			}
			
			available = SAVE_STATE.is_level_unlocked(difficulty);
			
			if (!available) {
				$gfx_draw_rectangle(x - 90, y - 100, 180, 200, 180, 180, 180, 200);
				$gfx_blit_image(lock, x - lock.width / 2, y - lock.height / 2);
			}
			
			FONT.render(titles[i - 1], x - 50, y + 60 + this.get_bounce(difficulty), 'M');
		}
		
		base_y = GAME_HEIGHT * 4 / 5;
		y = base_y + this.get_bounce('intro');
		x = GAME_WIDTH / 4 - 40;
		xy = FONT.render('Introduction', x, y, 'L');
		if (record_bounds) bounds['intro'] = [x, y, xy[0], xy[1]];
		
		x = 3 * GAME_WIDTH / 4 - 40;
		y = base_y + this.get_bounce('about');
		xy = FONT.render('About', x, y, 'L');
		if (record_bounds) bounds['about'] = [x, y, xy[0], xy[1]];
		
		
		if (record_bounds) {
			this.bounds = bounds;
		}
		this.my_rc++;
	}
}